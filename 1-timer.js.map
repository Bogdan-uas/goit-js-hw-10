{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst datetimePicker = document.querySelector('#datetime-picker');\nconst startButton = document.querySelector('[data-start]');\nconst daysValue = document.querySelector('[data-days]');\nconst hoursValue = document.querySelector('[data-hours]');\nconst minutesValue = document.querySelector('[data-minutes]');\nconst secondsValue = document.querySelector('[data-seconds]');\n\nlet selectedDate = null;\nlet timerInterval = null;\n\nconst options = {\nenableTime: true,\ntime_24hr: true,\ndefaultDate: new Date(),\nminuteIncrement: 1,\nonClose(date) {\n    selectedDate = date[0];\n    if (selectedDate <= new Date()) {\n    startButton.disabled = true;\n    iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n        position: 'topRight',\n    });\n    } else {\n    startButton.disabled = false;\n    }\n},\n};\n\nflatpickr(datetimePicker, options);\n\nstartButton.addEventListener('click', () => {\ndatetimePicker.disabled = true;\nstartButton.disabled = true;\n\ntimerInterval = setInterval(() => {\n    const timeRemaining = selectedDate - Date.now();\n    if (timeRemaining <= 0) {\n    clearInterval(timerInterval);\n    updateTimerDisplay(0, 0, 0, 0);\n    datetimePicker.disabled = false;\n    return;\n    }\n\n    const { days, hours, minutes, seconds } = convertMs(timeRemaining);\n    updateTimerDisplay(days, hours, minutes, seconds);\n}, 1000);\n});\n\nconst updateTimerDisplay = (days, hours, minutes, seconds) => {\ndaysValue.textContent = addLeadingZero(days);\nhoursValue.textContent = addLeadingZero(hours);\nminutesValue.textContent = addLeadingZero(minutes);\nsecondsValue.textContent = addLeadingZero(seconds);\n};\n\nconst convertMs = ms => {\nconst second = 1000;\nconst minute = second * 60;\nconst hour = minute * 60;\nconst day = hour * 24;\n\nconst days = Math.floor(ms / day);\nconst hours = Math.floor((ms % day) / hour);\nconst minutes = Math.floor(((ms % day) % hour) / minute);\nconst seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\nreturn { days, hours, minutes, seconds };\n};\n\nconst addLeadingZero = value => String(value).padStart(2, '0');"],"names":["datetimePicker","startButton","daysValue","hoursValue","minutesValue","secondsValue","selectedDate","timerInterval","options","date","iziToast","flatpickr","timeRemaining","updateTimerDisplay","days","hours","minutes","seconds","convertMs","addLeadingZero","ms","value"],"mappings":"0IAKA,MAAMA,EAAiB,SAAS,cAAc,kBAAkB,EAC1DC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAY,SAAS,cAAc,aAAa,EAChDC,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAe,SAAS,cAAc,gBAAgB,EACtDC,EAAe,SAAS,cAAc,gBAAgB,EAE5D,IAAIC,EAAe,KACfC,EAAgB,KAEpB,MAAMC,EAAU,CAChB,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAM,CACVH,EAAeG,EAAK,CAAC,EACjBH,GAAgB,IAAI,MACxBL,EAAY,SAAW,GACvBS,EAAS,MAAM,CACX,MAAO,QACP,QAAS,qCACT,SAAU,UAClB,CAAK,GAEDT,EAAY,SAAW,EAE3B,CACA,EAEAU,EAAUX,EAAgBQ,CAAO,EAEjCP,EAAY,iBAAiB,QAAS,IAAM,CAC5CD,EAAe,SAAW,GAC1BC,EAAY,SAAW,GAEvBM,EAAgB,YAAY,IAAM,CAC9B,MAAMK,EAAgBN,EAAe,KAAK,IAAG,EAC7C,GAAIM,GAAiB,EAAG,CACxB,cAAcL,CAAa,EAC3BM,EAAmB,EAAG,EAAG,EAAG,CAAC,EAC7Bb,EAAe,SAAW,GAC1B,MACC,CAED,KAAM,CAAE,KAAAc,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUN,CAAa,EACjEC,EAAmBC,EAAMC,EAAOC,EAASC,CAAO,CACpD,EAAG,GAAI,CACP,CAAC,EAED,MAAMJ,EAAqB,CAACC,EAAMC,EAAOC,EAASC,IAAY,CAC9Df,EAAU,YAAciB,EAAeL,CAAI,EAC3CX,EAAW,YAAcgB,EAAeJ,CAAK,EAC7CX,EAAa,YAAce,EAAeH,CAAO,EACjDX,EAAa,YAAcc,EAAeF,CAAO,CACjD,EAEMC,EAAYE,GAAM,CAMxB,MAAMN,EAAO,KAAK,MAAMM,EAAK,KAAG,EAC1BL,EAAQ,KAAK,MAAOK,EAAK,MAAO,IAAI,EACpCJ,EAAU,KAAK,MAAQI,EAAK,MAAO,KAAQ,GAAM,EACjDH,EAAU,KAAK,MAASG,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAN,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACtC,EAEME,EAAiBE,GAAS,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG"}